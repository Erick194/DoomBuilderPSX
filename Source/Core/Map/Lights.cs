#region ================== Copyright (c) 2007 Pascal vd Heiden

/*
 * Copyright (c) 2007 Pascal vd Heiden, www.codeimp.com
 * This program is released under GNU General Public License
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 */

#endregion

using CodeImp.DoomBuilder.Rendering;
using System;

namespace CodeImp.DoomBuilder.Map
{
    public static class Lights
    {
        // [GEC] DC: the lower and upper colors for the wall polygon and the z values at which does colors are applied.
        // These values are used to compute the color for a vertex depending on it's height with two colored lighting.
        public struct ShadingParams
        {
            public PixelColor lowerColor;
            public PixelColor upperColor;
            public float lowerColorZ;
            public float upperColorZ;
        }

        static readonly byte[] LIGHTS_DATA = new byte[]
        {
            0xff, 0xff, 0xff, 0xD8, 0xDE, 0xE7, 0xC9, 0xD9, 0xE0, 0xBA, 0xD3, 0xDA,
            0xAB, 0xCE, 0xD3, 0x9B, 0xC8, 0xCD, 0x8C, 0xC3, 0xC6, 0x7D, 0xBD, 0xC0,
            0x6E, 0xB8, 0xB9, 0x5F, 0xB2, 0xB2, 0x50, 0xAD, 0xAC, 0x41, 0xA7, 0xA5,
            0x31, 0xA2, 0x9F, 0x22, 0x9C, 0x98, 0x13, 0x97, 0x92, 0x04, 0x91, 0x8B,
            0x04, 0x3E, 0x8B, 0x04, 0x3B, 0x84, 0x04, 0x38, 0x7C, 0x04, 0x34, 0x75,
            0x03, 0x31, 0x6E, 0x03, 0x2E, 0x66, 0x03, 0x2B, 0x5F, 0x03, 0x28, 0x58,
            0x03, 0x24, 0x50, 0x03, 0x21, 0x49, 0x03, 0x1E, 0x42, 0x03, 0x1B, 0x3A,
            0x02, 0x18, 0x33, 0x02, 0x14, 0x2C, 0x02, 0x11, 0x24, 0x02, 0x0E, 0x1D,
            0xFF, 0xF5, 0x88, 0xFD, 0xED, 0x84, 0xFA, 0xE6, 0x80, 0xF8, 0xDE, 0x7B,
            0xF5, 0xD7, 0x77, 0xF3, 0xCF, 0x73, 0xF1, 0xC8, 0x6F, 0xEE, 0xC0, 0x6B,
            0xEC, 0xB8, 0x66, 0xEA, 0xB1, 0x62, 0xE7, 0xA9, 0x5E, 0xE5, 0xA2, 0x5A,
            0xE2, 0x9A, 0x56, 0xE0, 0x92, 0x51, 0xDE, 0x8B, 0x4D, 0xDB, 0x83, 0x49,
            0xD9, 0x7C, 0x45, 0xD6, 0x74, 0x41, 0xD4, 0x6D, 0x3D, 0xD2, 0x65, 0x38,
            0xCF, 0x5D, 0x34, 0xCD, 0x56, 0x30, 0xCA, 0x4E, 0x2C, 0xC8, 0x47, 0x28,
            0xC6, 0x3F, 0x23, 0xC3, 0x37, 0x1F, 0xC1, 0x30, 0x1B, 0xBF, 0x28, 0x17,
            0xBC, 0x21, 0x13, 0xBA, 0x19, 0x0E, 0xB7, 0x12, 0x0A, 0xB5, 0x0A, 0x06,
            0xB3, 0x02, 0x02, 0xAE, 0x02, 0x02, 0xA8, 0x02, 0x02, 0xA3, 0x02, 0x02,
            0x9E, 0x02, 0x02, 0x98, 0x02, 0x02, 0x93, 0x02, 0x02, 0x8E, 0x02, 0x02,
            0x88, 0x01, 0x01, 0x83, 0x01, 0x01, 0x7E, 0x01, 0x01, 0x78, 0x01, 0x01,
            0x73, 0x01, 0x01, 0x6E, 0x01, 0x01, 0x68, 0x01, 0x01, 0x63, 0x01, 0x01,
            0x5E, 0x01, 0x01, 0x59, 0x01, 0x01, 0x53, 0x01, 0x01, 0x4E, 0x01, 0x01,
            0x49, 0x01, 0x01, 0x43, 0x01, 0x01, 0x3E, 0x01, 0x01, 0x39, 0x01, 0x01,
            0x33, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x29, 0x00, 0x00, 0x23, 0x00, 0x00,
            0x1E, 0x00, 0x00, 0x19, 0x00, 0x00, 0x13, 0x00, 0x00, 0x0E, 0x00, 0x00,
            0xFF, 0xFF, 0x77, 0xEE, 0xF8, 0x6F, 0xDD, 0xF1, 0x67, 0xCC, 0xEA, 0x5F,
            0xBB, 0xE3, 0x57, 0xAA, 0xDC, 0x4F, 0x99, 0xD5, 0x47, 0x88, 0xCE, 0x3F,
            0x77, 0xC6, 0x38, 0x66, 0xBF, 0x30, 0x55, 0xB8, 0x28, 0x44, 0xB1, 0x20,
            0x33, 0xAA, 0x18, 0x22, 0xA3, 0x10, 0x11, 0x9C, 0x08, 0x00, 0x95, 0x00,
            0x01, 0x8D, 0x01, 0x01, 0x86, 0x02, 0x02, 0x7E, 0x03, 0x03, 0x76, 0x04,
            0x03, 0x6F, 0x04, 0x04, 0x67, 0x05, 0x05, 0x5F, 0x06, 0x06, 0x58, 0x07,
            0x06, 0x50, 0x08, 0x07, 0x48, 0x09, 0x08, 0x40, 0x0A, 0x08, 0x39, 0x0B,
            0x09, 0x31, 0x0B, 0x0A, 0x29, 0x0C, 0x0A, 0x22, 0x0D, 0x0B, 0x1A, 0x0E,
            0xFF, 0xEE, 0xEE, 0xFF, 0xDE, 0xDE, 0xFF, 0xCE, 0xCE, 0xFF, 0xBE, 0xBE,
            0xFF, 0xAF, 0xAF, 0xFF, 0x9F, 0x9F, 0xFF, 0x8F, 0x8F, 0xFF, 0x7F, 0x7F,
            0xFF, 0x6F, 0x6F, 0xFF, 0x5F, 0x5F, 0xFF, 0x4F, 0x4F, 0xFF, 0x3F, 0x3F,
            0xFF, 0x30, 0x30, 0xFF, 0x20, 0x20, 0xFF, 0x10, 0x10, 0xFF, 0x00, 0x00,
            0xD4, 0xE8, 0xB3, 0xCC, 0xE4, 0xA5, 0xC4, 0xDF, 0x98, 0xBB, 0xDA, 0x89,
            0xB0, 0xD5, 0x7A, 0xA8, 0xD0, 0x6D, 0x9F, 0xCB, 0x5E, 0x96, 0xC6, 0x4F,
            0x8E, 0xC1, 0x42, 0x83, 0xB2, 0x3D, 0x78, 0xA2, 0x39, 0x6E, 0x95, 0x34,
            0x61, 0x86, 0x2F, 0x56, 0x76, 0x2B, 0x4C, 0x69, 0x26, 0x42, 0x5A, 0x21,
            0xFF, 0xFA, 0xE5, 0xFF, 0xF7, 0xD6, 0xFF, 0xF4, 0xC6, 0xFF, 0xF2, 0xB7,
            0xFF, 0xEF, 0xA8, 0xFF, 0xEC, 0x99, 0xFF, 0xE9, 0x89, 0xFF, 0xE6, 0x7A,
            0xFF, 0xE4, 0x6B, 0xFF, 0xE1, 0x5C, 0xFF, 0xDE, 0x4C, 0xFF, 0xDB, 0x3D,
            0xFF, 0xD8, 0x2E, 0xFF, 0xD6, 0x1F, 0xFF, 0xD3, 0x0F, 0xFF, 0xD0, 0x00,
            0xF1, 0xBF, 0x04, 0xE3, 0xAE, 0x08, 0xD5, 0x9D, 0x0C, 0xC7, 0x8C, 0x11,
            0xB8, 0x7A, 0x15, 0xAA, 0x69, 0x19, 0x9C, 0x58, 0x1D, 0x8E, 0x47, 0x21,
            0x7D, 0x3F, 0x1D, 0x6D, 0x36, 0x19, 0x60, 0x30, 0x16, 0x53, 0x29, 0x13,
            0x46, 0x23, 0x11, 0x39, 0x1C, 0x0E, 0x2C, 0x16, 0x0B, 0x1F, 0x0F, 0x08,
            0xD5, 0x94, 0x70, 0xC7, 0x8B, 0x69, 0xBA, 0x81, 0x62, 0xAC, 0x78, 0x5B,
            0x9E, 0x6E, 0x53, 0x91, 0x65, 0x4C, 0x83, 0x5B, 0x45, 0x75, 0x52, 0x3E,
            0x68, 0x48, 0x37, 0x5A, 0x3F, 0x30, 0x4C, 0x35, 0x29, 0x3F, 0x2C, 0x22,
            0x31, 0x22, 0x1A, 0x23, 0x19, 0x13, 0x16, 0x0F, 0x0C, 0x08, 0x06, 0x05,
            0xCC, 0x96, 0x35, 0xBF, 0x8D, 0x32, 0xB3, 0x84, 0x2F, 0xA6, 0x7A, 0x2B,
            0x9A, 0x71, 0x28, 0x8D, 0x68, 0x25, 0x80, 0x5F, 0x22, 0x74, 0x56, 0x1F,
            0x67, 0x4C, 0x1B, 0x5B, 0x43, 0x18, 0x4E, 0x3A, 0x15, 0x41, 0x31, 0x12,
            0x35, 0x28, 0x0F, 0x28, 0x1E, 0x0B, 0x1C, 0x15, 0x08, 0x0F, 0x0C, 0x05,
            0xE6, 0xEB, 0xF0, 0xD8, 0xDE, 0xE7, 0xCB, 0xD1, 0xDE, 0xBD, 0xC4, 0xD5,
            0xAF, 0xB7, 0xCB, 0xA1, 0xAA, 0xC2, 0x94, 0x9D, 0xB9, 0x86, 0x91, 0xB0,
            0x78, 0x84, 0xA7, 0x6B, 0x77, 0x9E, 0x5D, 0x6A, 0x95, 0x4F, 0x5D, 0x8B,
            0x41, 0x50, 0x82, 0x34, 0x43, 0x79, 0x26, 0x36, 0x70, 0x28, 0x33, 0x6D,
            0x2A, 0x2F, 0x6B, 0x2C, 0x2C, 0x68, 0x2F, 0x28, 0x66, 0x30, 0x23, 0x62,
            0x31, 0x1F, 0x5D, 0x31, 0x1A, 0x59, 0x32, 0x15, 0x55, 0x33, 0x10, 0x50,
            0x34, 0x0C, 0x4C, 0x34, 0x07, 0x47, 0x35, 0x02, 0x43, 0x00, 0x00, 0x00,
            0x8C, 0xB3, 0x8C, 0x05, 0x42, 0x94, 0xFF, 0xCD, 0x5A, 0xC9, 0x04, 0x04
        };

        public static PixelColor GetColor(int lightIdx)
        {
            if (lightIdx == 0)
                return new PixelColor(255, 255, 255, 255);

            return new PixelColor(
                255,
                LIGHTS_DATA[(lightIdx * 3)],
                LIGHTS_DATA[(lightIdx * 3) + 1],
                LIGHTS_DATA[(lightIdx * 3) + 2]
            );
        }

        // [GEC] DC: A helper function that computes the shading parameters used for dual colored lighting given a sector and specified base color.
        // Sets the lower and upper colors and the z values at which those colors apply (for interpolation purposes).
        public static void ComputeShadingParams(Sector sector, PixelColor baseColor, out ShadingParams shadeParams)
        {
            // Basic floor/ceiling z values for shading
            shadeParams.lowerColorZ = sector.FloorHeight;
            shadeParams.upperColorZ = sector.CeilHeight;

            // Set the lower and upper colors.
            // Note: if the upper color is undefined (or dual colored lighting disabled), use the lower color as the upper color and early out.
            shadeParams.lowerColor = PixelColor.Modulate(baseColor, GetColor(sector.IdxColor)).WithAlpha(255);
            int ceilColorIdx = sector.IdxColorCeil;

            if ((ceilColorIdx == 0) || (!General.Map.Config.PSXDOOM_DCLIGHTS))
            {
                shadeParams.upperColor = shadeParams.lowerColor;
                return;
            }

            shadeParams.upperColor = PixelColor.Modulate(baseColor, GetColor(ceilColorIdx)).WithAlpha(255);

            // Get the flags encoding how to adjust the gradient.
            // This is not the most efficient (or elegant) way of looking up these flags but probably fine for the purposes of an editor.
            bool bContractGradient = sector.IsFlagSet("4");
            bool bFloorGradPlus1 = sector.IsFlagSet("8");
            bool bFloorGradPlus2 = sector.IsFlagSet("16");
            bool bCeilGradPlus1 = sector.IsFlagSet("32");
            bool bCeilGradPlus2 = sector.IsFlagSet("64");

            // Adjust the floor/ceiling z values for the purposes of shading (if adjustments are specified)
            float sectorHeight = Math.Max(shadeParams.upperColorZ - shadeParams.lowerColorZ, 0);
            int floorGradShift = (bFloorGradPlus1 ? 1 : 0) + (bFloorGradPlus2 ? 2 : 0);
            int ceilGradShift = (bCeilGradPlus1 ? 1 : 0) + (bCeilGradPlus2 ? 2 : 0);

            if (bContractGradient)
            {
                switch (floorGradShift)
                {
                    case 1: shadeParams.lowerColorZ += sectorHeight * 0.25f; break;
                    case 2: shadeParams.lowerColorZ += sectorHeight * 0.50f; break;
                    case 3: shadeParams.lowerColorZ += sectorHeight * 0.75f; break;
                }

                switch (ceilGradShift)
                {
                    case 1: shadeParams.upperColorZ -= sectorHeight * 0.25f; break;
                    case 2: shadeParams.upperColorZ -= sectorHeight * 0.50f; break;
                    case 3: shadeParams.upperColorZ -= sectorHeight * 0.75f; break;
                }
            }
            else
            {
                switch (floorGradShift)
                {
                    case 1: shadeParams.lowerColorZ -= sectorHeight * 0.5f; break;
                    case 2: shadeParams.lowerColorZ -= sectorHeight * 1.0f; break;
                    case 3: shadeParams.lowerColorZ -= sectorHeight * 2.0f; break;
                }

                switch (ceilGradShift)
                {
                    case 1: shadeParams.upperColorZ += sectorHeight * 0.5f; break;
                    case 2: shadeParams.upperColorZ += sectorHeight * 1.0f; break;
                    case 3: shadeParams.upperColorZ += sectorHeight * 2.0f; break;
                }
            }
        }

        // [GEC] DC: dual color lighting calculation.
        // Gets the color to use for the given Z (height) value and dual colored lighting params.
        public static PixelColor GetColorForZ(float z, ShadingParams shadeParams)
        {
            // Same color? If so then don't do any interpolation:
            if (shadeParams.lowerColor.Equals(shadeParams.upperColor))
                return shadeParams.lowerColor;

            // If there is zero or invalid sized z range then just return the floor color
            float zRange = shadeParams.upperColorZ - shadeParams.lowerColorZ;

            if (zRange <= 0.0f)
                return shadeParams.lowerColor;

            // Interpolate between the two colors based on z
            float t = (z - shadeParams.lowerColorZ) / zRange;
            t = Math.Min(Math.Max(t, 0.0f), 1.0f);
            return PixelColor.Lerp(shadeParams.lowerColor, shadeParams.upperColor, t);
        }
    }
}
